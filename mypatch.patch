diff --git a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
index a252c1317..8be78c293 100644
--- a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
+++ b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
@@ -61,7 +61,8 @@ public class DeviceCompat {
 	}
 	
 	public static boolean isDebug(){
-		return Game.version.contains("INDEV");
+		//return Game.version.contains("INDEV");
+		return true;
 	}
 	
 	public static void log( String tag, String message ){
diff --git a/build.gradle b/build.gradle
index 97cd23d1a..46f1d6f9a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,8 +11,8 @@ buildscript {
 allprojects {
 
     ext {
-        appName = 'Shattered Pixel Dungeon'
-        appPackageName = 'com.shatteredpixel.shatteredpixeldungeon'
+        appName = 'SPD Seed Manager'
+        appPackageName = 'com.QWERdev.shpdseedmanager'
 
         appVersionCode = 722
         appVersionName = '2.1.0'
diff --git a/core/src/main/assets/messages/scenes/scenes_ko.properties b/core/src/main/assets/messages/scenes/scenes_ko.properties
index b248deb8b..2624290db 100644
--- a/core/src/main/assets/messages/scenes/scenes_ko.properties
+++ b/core/src/main/assets/messages/scenes/scenes_ko.properties
@@ -83,14 +83,21 @@ scenes.interlevelscene.install=게임 설치
 scenes.interlevelscene.file_not_found=저장된 게임을 찾지 못했습니다. 다시 시작한 뒤에도 똑같은 오류가 발생한다면, 당신이 저장한 게임이 손상된 것입니다. 죄송합니다.
 scenes.interlevelscene.io_error=저장된 게임을 읽을 수 없습니다. 다시 시작한 뒤에도 똑같은 오류가 발생한다면, 당신이 저장한 게임이 손상된 것입니다. 죄송합니다.
 
-scenes.newsscene.title=게임 소식
-scenes.newsscene.read_more=자세히
-scenes.newsscene$newsinfo.english_warn=새로운 소식은 개발자가 작성하며 영어로만 작성됩니다.
-scenes.newsscene$newsinfo.metered_network=당신이 지금 모바일 데이터와 같은 요금제 네트워크에 연결되어 있어서, 새로운 소식을 확인할 수 없었습니다.
-scenes.newsscene$newsinfo.enable_data=모바일 데이터 확인
-scenes.newsscene$newsinfo.no_internet=새로운 소식을 확인할 수 없었습니다. 인터넷에 연결되어 있는지 확인해 주세요.
-scenes.newsscene$newsinfo.news_disabled=당신은 새로운 소식 확인을 비활성화했기 때문에, 여기에는 아무것도 나오지 않을 것입니다.
-scenes.newsscene$newsinfo.enable_news=소식 활성화
+#scenes.newsscene.title=게임 소식
+#scenes.newsscene.read_more=자세히
+#scenes.newsscene$newsinfo.english_warn=새로운 소식은 개발자가 작성하며 영어로만 작성됩니다.
+#scenes.newsscene$newsinfo.metered_network=당신이 지금 모바일 데이터와 같은 요금제 네트워크에 연결되어 있어서, 새로운 소식을 확인할 수 없었습니다.
+#scenes.newsscene$newsinfo.enable_data=모바일 데이터 확인
+#scenes.newsscene$newsinfo.no_internet=새로운 소식을 확인할 수 없었습니다. 인터넷에 연결되어 있는지 확인해 주세요.
+#scenes.newsscene$newsinfo.news_disabled=당신은 새로운 소식 확인을 비활성화했기 때문에, 여기에는 아무것도 나오지 않을 것입니다.
+#scenes.newsscene$newsinfo.enable_news=소식 활성화
+scenes.newsscene.title=시드 분석
+scenes.newsscene.analyze=분석
+scenes.newsscene.here=이곳에 분석 결과가 나옵니다.
+scenes.newsscene.intro=저는 수많은 모바일 게임을 망치는 광고와 수많은 소액 결제들을 섀터드 픽셀 던전에 넣고 싶지 않습니다. 대신, 여러분들께 게임을 직접 후원해 드릴 것을 부탁드립니다!
+scenes.newsscene.patreon_msg=당신이 섀터드 픽셀 던전을 즐기고 있고, 제가 이 게임을 개발하는 것을 돕고 싶다면, _Patreon_에서 저를 지원해 주세요! Patreon 지원자들에게 특별한 보상을 제공할 수 있게 해 줍니다!\n_- 선행 체험권_, 게임의 베타 업데이트를 선행 체험할 수 있습니다.\n_- 주간 미니 블로그_, 현재 개발 중인 사항을 엿볼 있습니다.\n_- 월간 설문조사_, 개발 방향에 직접 기여할 수 있습니다.\n_- 실물 핀 상품_, 후원 1년, 2년, 3년차 보상입니다.\n_- 커뮤니티 디스코드_, 채팅 채널과 개발 일지가 있습니다.\n\n_이게 끝이 아닙니다!_ 제 Patreon 페이지에서 더 많은 정보를 얻을 수 있습니다. 감사합니다. 즐거운 던전 탐험 되세요!
+scenes.newsscene.patreon_english=(Patreon 보상은 영어로만 제공된다는 것에 유의하십시오.)
+scenes.newsscene.supporter_link=Patreon 페이지로 이동
 
 scenes.rankingsscene.title=최고의 모험가
 scenes.rankingsscene.total=총 모험 횟수:
@@ -113,7 +120,9 @@ scenes.titlescene.enter=던전으로 들어가기
 scenes.titlescene.rankings=랭킹
 scenes.titlescene.badges=배지
 scenes.titlescene.news=새 소식
+scenes.titlescene.seedanalyze=시드 분석
 scenes.titlescene.changes=변경
+scenes.titlescene.seedfind=시드 찾기
 scenes.titlescene.update=업데이트
 scenes.titlescene.install=설치
 scenes.titlescene.settings=설정
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
index 3a2e870d1..9ed3451e6 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
@@ -59,7 +59,7 @@ public class SPDSettings extends GameSettings {
 	public static final String KEY_CAMERA_FOLLOW= "camera_follow";
 	
 	public static void fullscreen( boolean value ) {
-		put( KEY_FULLSCREEN, value );
+		put( KEY_FULLSCREEN, false );
 		
 		ShatteredPixelDungeon.updateSystemUI();
 	}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
index 0445e3684..cdbee598d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
@@ -41,7 +41,7 @@ public class ArmoredStatue extends Statue {
 		spriteClass = StatueSprite.class;
 	}
 
-	protected Armor armor;
+	public Armor armor;
 
 	public ArmoredStatue(){
 		super();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
index 5721085ee..7b24a9356 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
@@ -47,7 +47,7 @@ public class Statue extends Mob {
 		properties.add(Property.INORGANIC);
 	}
 	
-	protected Weapon weapon;
+	public Weapon weapon;
 
 	public boolean levelGenStatue = true;
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
index f500bc4d7..d76e4eb88 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
@@ -206,7 +206,7 @@ public class Wandmaker extends NPC {
 	
 	public static class Quest {
 
-		private static int type;
+		public static int type;
 		// 1 = corpse dust quest
 		// 2 = elemental embers quest
 		// 3 = rotberry quest
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
index 269ab38d2..43fcc4dd8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
@@ -67,7 +67,11 @@ public class Heap implements Bundlable {
 		CRYSTAL_CHEST,
 		TOMB,
 		SKELETON,
-		REMAINS
+		REMAINS,
+		MIMIC,
+		GOLDEN_MIMIC,
+		CRYSTAL_MIMIC,
+		STATUE
 	}
 	public Type type = Type.HEAP;
 	
@@ -378,6 +382,14 @@ public class Heap implements Bundlable {
 				return Messages.get(this, "skeleton");
 			case REMAINS:
 				return Messages.get(this, "remains");
+			case MIMIC:
+				return "미믹";
+			case GOLDEN_MIMIC:
+				return "황금 미믹";
+			case CRYSTAL_MIMIC:
+				return "수정 미믹";
+			case STATUE:
+				return "움직이는 석상";
 			default:
 				return peek().title();
 		}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
index 7ae6f2cf5..4b8278630 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
@@ -239,7 +239,19 @@ public class AboutScene extends PixelScene {
 		freesound.setRect(transifex.left()-10, transifex.bottom() + 8, colWidth+20, 0);
 		content.add(freesound);
 
-		content.setSize( fullWidth, freesound.bottom()+10 );
+		addLine(freesound.bottom() + 4, content);
+
+		CreditsBlock Lylias = new CreditsBlock(true,
+				0x55AAFF,
+				"Lylias",
+				null,
+				"\nSomeone who made this >.<\n",
+				"GitHub",
+				"https://github.com/Llyias/shpd-seedManager-ko");
+		Lylias.setRect(freesound.left(), freesound.bottom() + 10, colWidth+20, 0);
+		content.add(Lylias);
+
+		content.setSize( fullWidth, Lylias.bottom()+10 );
 
 		list.setRect( 0, 0, w, h );
 		list.scrollTo(0, 0);
@@ -262,7 +274,7 @@ public class AboutScene extends PixelScene {
 		content.add(line);
 	}
 
-	private static class CreditsBlock extends Component {
+	public static class CreditsBlock extends Component {
 
 		boolean large;
 		RenderedTextBlock title;
@@ -275,7 +287,7 @@ public class AboutScene extends PixelScene {
 		PointerArea linkButton;
 
 		//many elements can be null, but body is assumed to have content.
-		private CreditsBlock(boolean large, int highlight, String title, Image avatar, String body, String linkText, String linkUrl){
+		public CreditsBlock(boolean large, int highlight, String title, Image avatar, String body, String linkText, String linkUrl){
 			super();
 
 			this.large = large;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
index 8e2eea8bc..92601d71a 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
@@ -21,358 +21,261 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.scenes;
 
-import com.shatteredpixel.shatteredpixeldungeon.Assets;
-import com.shatteredpixel.shatteredpixeldungeon.Chrome;
+import java.lang.NumberFormatException;
+import java.util.Arrays;
+
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.SeedFinder;
+import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
-import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Flare;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Archs;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ExitButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
 import com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane;
-import com.shatteredpixel.shatteredpixeldungeon.ui.StyledButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Window;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeInfo;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChanges;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChangesTabbed;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_1_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_2_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_3_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_4_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_5_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_6_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_7_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_8_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_9_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v1_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v2_X_Changes;
-import com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndStory;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed;
+import com.watabou.input.PointerEvent;
 import com.watabou.noosa.Camera;
+import com.watabou.noosa.ColorBlock;
+import com.watabou.noosa.Group;
 import com.watabou.noosa.Image;
-import com.watabou.noosa.NinePatch;
-import com.watabou.noosa.Scene;
-import com.watabou.noosa.audio.Music;
+import com.watabou.noosa.PointerArea;
 import com.watabou.noosa.ui.Component;
-
-import java.util.ArrayList;
+import com.watabou.utils.DeviceCompat;
 
 public class ChangesScene extends PixelScene {
-	
+
 	public static int changesSelected = 0;
 
-	private NinePatch rightPanel;
-	private ScrollPane rightScroll;
-	private IconTitle changeTitle;
-	private RenderedTextBlock changeBody;
+	public static void showChangeInfo(Image icon, String title, String... messages){
+	}
 	
 	@Override
 	public void create() {
 		super.create();
 
-		Music.INSTANCE.playTracks(
-				new String[]{Assets.Music.THEME_1, Assets.Music.THEME_2},
-				new float[]{1, 1},
-				false);
+		final float colWidth = 120;
+		final float fullWidth = colWidth * (landscape() ? 2 : 1);
 
 		int w = Camera.main.width;
 		int h = Camera.main.height;
 
-		RenderedTextBlock title = PixelScene.renderTextBlock( Messages.get(this, "title"), 9 );
-		title.hardlight(Window.TITLE_COLOR);
-		title.setPos(
-				(w - title.width()) / 2f,
-				(20 - title.height()) / 2f
-		);
-		align(title);
-		add(title);
+		Archs archs = new Archs();
+		archs.setSize( w, h );
+		add( archs );
+
+		//darkens the arches
+		add(new ColorBlock(w, h, 0x88000000));
 
+		ScrollPane list = new ScrollPane( new Component() );
+		add( list );
+
+		String existingSeedtext = SPDSettings.customSeed();
+		ShatteredPixelDungeon.scene().addToFront( new WndTextInput("시드 찾기",
+			"원하는 아이템들을 줄바꿈(Enter)으로 구분지어 입력해주세요",
+			"30층까지 탐색\n",
+			1000,
+			true,
+			"찾기",
+			Messages.get(HeroSelectScene.class, "custom_seed_clear")){
+				@Override
+					public void onSelect(boolean positive, String text) {
+						int floor = 30;
+						boolean floorOption = false;
+						if(text.contains("층까지")){
+							floorOption = true;
+							String fl = text.split("층")[0].trim();
+							try{
+								floor = Integer.parseInt(fl);
+							}catch(NumberFormatException e){
+							
+							}
+						}
+						if (positive && text != ""){
+							String[] itemList = floorOption?Arrays.copyOfRange(text.split("\n"), 1, text.split("\n").length):text.split("\n");
+							Component content = list.content();
+							content.clear();
+							list.setRect( 0, 0, w, h );
+							list.scrollTo(0, 0);
+							CreditsBlock txt = new CreditsBlock(true,
+								Window.TITLE_COLOR,
+								null,
+								null,
+								new SeedFinder().findSeed(itemList,floor),
+								null,
+								null);
+							txt.setRect((Camera.main.width - colWidth)/2f, 12, colWidth, 0);
+							content.add(txt);
+							content.setSize( fullWidth, txt.bottom()+10 );
+						} else {
+							SPDSettings.customSeed("");
+							ShatteredPixelDungeon.switchNoFade( TitleScene.class );
+						}
+					}
+			});
+			
 		ExitButton btnExit = new ExitButton();
 		btnExit.setPos( Camera.main.width - btnExit.width(), 0 );
 		add( btnExit );
 
-		NinePatch panel = Chrome.get(Chrome.Type.TOAST);
-
-		int pw = 135 + panel.marginLeft() + panel.marginRight() - 2;
-		int ph = h - 36;
-
-		if (h >= PixelScene.MIN_HEIGHT_FULL && w >= PixelScene.MIN_WIDTH_FULL) {
-			panel.size( pw, ph );
-			panel.x = (w - pw) / 2f - pw/2 - 1;
-			panel.y = title.bottom() + 5;
-
-			rightPanel = Chrome.get(Chrome.Type.TOAST);
-			rightPanel.size( pw, ph );
-			rightPanel.x = (w - pw) / 2f + pw/2 + 1;
-			rightPanel.y = title.bottom() + 5;
-			add(rightPanel);
-
-			rightScroll = new ScrollPane(new Component());
-			add(rightScroll);
-			rightScroll.setRect(
-					rightPanel.x + rightPanel.marginLeft(),
-					rightPanel.y + rightPanel.marginTop()-1,
-					rightPanel.innerWidth() + 2,
-					rightPanel.innerHeight() + 2);
-			rightScroll.scrollTo(0, 0);
-
-			changeTitle = new IconTitle(Icons.get(Icons.CHANGES), Messages.get(this, "right_title"));
-			changeTitle.setPos(0, 1);
-			changeTitle.setSize(pw, 20);
-			rightScroll.content().add(changeTitle);
-
-			String body = Messages.get(this, "right_body");
-
-			changeBody = PixelScene.renderTextBlock(body, 6);
-			changeBody.maxWidth(pw - panel.marginHor());
-			changeBody.setPos(0, changeTitle.bottom()+2);
-			rightScroll.content().add(changeBody);
-
-		} else {
-			panel.size( pw, ph );
-			panel.x = (w - pw) / 2f;
-			panel.y = title.bottom() + 5;
-		}
-		align( panel );
-		add( panel );
-		
-		final ArrayList<ChangeInfo> changeInfos = new ArrayList<>();
-
-		if (Messages.lang() != Languages.ENGLISH){
-			ChangeInfo langWarn = new ChangeInfo("", true, Messages.get(this, "lang_warn"));
-			langWarn.hardlight(CharSprite.WARNING);
-			changeInfos.add(langWarn);
-		}
-		
-		switch (changesSelected){
-			case 0: default:
-				v2_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 1:
-				v1_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 2:
-				v0_9_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 3:
-				v0_8_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 4:
-				v0_7_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 5:
-				v0_6_X_Changes.addAllChanges(changeInfos);
-				break;
-			case 6:
-				v0_5_X_Changes.addAllChanges(changeInfos);
-				v0_4_X_Changes.addAllChanges(changeInfos);
-				v0_3_X_Changes.addAllChanges(changeInfos);
-				v0_2_X_Changes.addAllChanges(changeInfos);
-				v0_1_X_Changes.addAllChanges(changeInfos);
-				break;
-		}
+		//fadeIn();
+	}
+	
+	@Override
+	protected void onBackPressed() {
+		ShatteredPixelDungeon.switchScene(TitleScene.class);
+	}
 
-		ScrollPane list = new ScrollPane( new Component() ){
+	private void addLine( float y, Group content ){
+		ColorBlock line = new ColorBlock(Camera.main.width, 1, 0xFF333333);
+		line.y = y;
+		content.add(line);
+	}
 
-			@Override
-			public void onClick(float x, float y) {
-				for (ChangeInfo info : changeInfos){
-					if (info.onClick( x, y )){
-						return;
-					}
-				}
-			}
+	public static class CreditsBlock extends Component {
 
-		};
-		add( list );
+		boolean large;
+		RenderedTextBlock title;
+		Image avatar;
+		Flare flare;
+		RenderedTextBlock body;
 
-		Component content = list.content();
-		content.clear();
-
-		float posY = 0;
-		float nextPosY = 0;
-		boolean second = false;
-		for (ChangeInfo info : changeInfos){
-			if (info.major) {
-				posY = nextPosY;
-				second = false;
-				info.setRect(0, posY, panel.innerWidth(), 0);
-				content.add(info);
-				posY = nextPosY = info.bottom();
-			} else {
-				if (!second){
-					second = true;
-					info.setRect(0, posY, panel.innerWidth()/2f, 0);
-					content.add(info);
-					nextPosY = info.bottom();
-				} else {
-					second = false;
-					info.setRect(panel.innerWidth()/2f, posY, panel.innerWidth()/2f, 0);
-					content.add(info);
-					nextPosY = Math.max(info.bottom(), nextPosY);
-					posY = nextPosY;
-				}
-			}
-		}
+		RenderedTextBlock link;
+		ColorBlock linkUnderline;
+		PointerArea linkButton;
 
-		content.setSize( panel.innerWidth(), (int)Math.ceil(posY) );
-
-		list.setRect(
-				panel.x + panel.marginLeft(),
-				panel.y + panel.marginTop() - 1,
-				panel.innerWidth() + 2,
-				panel.innerHeight() + 2);
-		list.scrollTo(0, 0);
-
-		StyledButton btn2_X = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "2.X"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 0) {
-					changesSelected = 0;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
-			}
-		};
-		if (changesSelected != 0) btn2_X.textColor( 0xBBBBBB );
-		btn2_X.setRect(list.left()-4f, list.bottom(), 21, changesSelected == 0 ? 19 : 15);
-		addToBack(btn2_X);
-
-		StyledButton btn1_X = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "1.X"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 1) {
-					changesSelected = 1;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
+		//many elements can be null, but body is assumed to have content.
+		public CreditsBlock(boolean large, int highlight, String title, Image avatar, String body, String linkText, String linkUrl){
+			super();
+
+			this.large = large;
+
+			if (title != null) {
+				this.title = PixelScene.renderTextBlock(title, large ? 8 : 6);
+				if (highlight != -1) this.title.hardlight(highlight);
+				add(this.title);
 			}
-		};
-		if (changesSelected != 1) btn1_X.textColor( 0xBBBBBB );
-		btn1_X.setRect(btn2_X.right()-2, list.bottom(), 21, changesSelected == 1 ? 19 : 15);
-		addToBack(btn1_X);
-
-		StyledButton btn0_9 = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "0.9"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 2) {
-					changesSelected = 2;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
+
+			if (avatar != null){
+				this.avatar = avatar;
+				add(this.avatar);
 			}
-		};
-		if (changesSelected != 2) btn0_9.textColor( 0xBBBBBB );
-		btn0_9.setRect(btn1_X.right()-2, list.bottom(), 21, changesSelected == 2 ? 19 : 15);
-		addToBack(btn0_9);
-
-		StyledButton btn0_8 = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "0.8"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 3) {
-					changesSelected = 3;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
+
+			if (large && highlight != -1 && this.avatar != null){
+				this.flare = new Flare( 7, 24 ).color( highlight, true ).show(this.avatar, 0);
+				this.flare.angularSpeed = 20;
 			}
-		};
-		if (changesSelected != 3) btn0_8.textColor( 0xBBBBBB );
-		btn0_8.setRect(btn0_9.right()-2, list.bottom(), 21, changesSelected == 3 ? 19 : 15);
-		addToBack(btn0_8);
-		
-		StyledButton btn0_7 = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "0.7"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 4) {
-					changesSelected = 4;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
+
+			this.body = PixelScene.renderTextBlock(body, 6);
+			if (highlight != -1) this.body.setHightlighting(true, highlight);
+			if (large) this.body.align(RenderedTextBlock.CENTER_ALIGN);
+			add(this.body);
+
+			if (linkText != null && linkUrl != null){
+
+				int color = 0xFFFFFFFF;
+				if (highlight != -1) color = 0xFF000000 | highlight;
+				this.linkUnderline = new ColorBlock(1, 1, color);
+				add(this.linkUnderline);
+
+				this.link = PixelScene.renderTextBlock(linkText, 6);
+				if (highlight != -1) this.link.hardlight(highlight);
+				add(this.link);
+
+				linkButton = new PointerArea(0, 0, 0, 0){
+					@Override
+					protected void onClick( PointerEvent event ) {
+						ShatteredPixelDungeon.platform.openURI( linkUrl );
+					}
+				};
+				add(linkButton);
 			}
-		};
-		if (changesSelected != 4) btn0_7.textColor( 0xBBBBBB );
-		btn0_7.setRect(btn0_8.right()-2, btn0_8.top(), 21, changesSelected == 4 ? 19 : 15);
-		addToBack(btn0_7);
-		
-		StyledButton btn0_6 = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "0.6"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 5) {
-					changesSelected = 5;
-					ShatteredPixelDungeon.seamlessResetScene();
-				}
+
+		}
+
+		@Override
+		protected void layout() {
+			super.layout();
+
+			float topY = top();
+
+			if (title != null){
+				title.maxWidth((int)width());
+				title.setPos( x + (width() - title.width())/2f, topY);
+				topY += title.height() + (large ? 2 : 1);
 			}
-		};
-		if (changesSelected != 5) btn0_6.textColor( 0xBBBBBB );
-		btn0_6.setRect(btn0_7.right()-2, btn0_8.top(), 21, changesSelected == 5 ? 19 : 15);
-		addToBack(btn0_6);
-		
-		StyledButton btnOld = new StyledButton(Chrome.Type.GREY_BUTTON_TR, "0.5-1"){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				if (changesSelected != 6) {
-					changesSelected = 6;
-					ShatteredPixelDungeon.seamlessResetScene();
+
+			if (large){
+
+				if (avatar != null){
+					avatar.x = x + (width()-avatar.width())/2f;
+					avatar.y = topY;
+					PixelScene.align(avatar);
+					if (flare != null){
+						flare.point(avatar.center());
+					}
+					topY = avatar.y + avatar.height() + 2;
 				}
-			}
-		};
-		if (changesSelected != 6) btnOld.textColor( 0xBBBBBB );
-		btnOld.setRect(btn0_6.right()-2, btn0_8.top(), 27, changesSelected == 6 ? 19 : 15);
-		addToBack(btnOld);
 
-		Archs archs = new Archs();
-		archs.setSize( Camera.main.width, Camera.main.height );
-		addToBack( archs );
+				body.maxWidth((int)width());
+				body.setPos( x + (width() - body.width())/2f, topY);
+				topY += body.height() + 2;
 
-		fadeIn();
-	}
+			} else {
 
-	private void updateChangesText(Image icon, String title, String... messages){
-		if (changeTitle != null){
-			changeTitle.icon(icon);
-			changeTitle.label(title);
-			changeTitle.setPos(changeTitle.left(), changeTitle.top());
-
-			String message = "";
-			for (int i = 0; i < messages.length; i++){
-				message += messages[i];
-				if (i != messages.length-1){
-					message += "\n\n";
+				if (avatar != null){
+					avatar.x = x;
+					body.maxWidth((int)(width() - avatar.width - 1));
+
+					float fullAvHeight = Math.max(avatar.height(), 16);
+					if (fullAvHeight > body.height()){
+						avatar.y = topY + (fullAvHeight - avatar.height())/2f;
+						PixelScene.align(avatar);
+						body.setPos( avatar.x + avatar.width() + 1, topY + (fullAvHeight - body.height())/2f);
+						topY += fullAvHeight + 1;
+					} else {
+						avatar.y = topY + (body.height() - fullAvHeight)/2f;
+						PixelScene.align(avatar);
+						body.setPos( avatar.x + avatar.width() + 1, topY);
+						topY += body.height() + 2;
+					}
+
+				} else {
+					topY += 1;
+					body.maxWidth((int)width());
+					body.setPos( x, topY);
+					topY += body.height()+2;
 				}
+
 			}
-			changeBody.text(message);
-			rightScroll.content().setSize(rightScroll.width(), changeBody.bottom()+2);
-			rightScroll.setSize(rightScroll.width(), rightScroll.height());
-			rightScroll.scrollTo(0, 0);
-
-		} else {
-			if (messages.length == 1) {
-				addToFront(new WndChanges(icon, title, messages[0]));
-			} else {
-				addToFront(new WndChangesTabbed(icon, title, messages));
+
+			if (link != null){
+				if (large) topY += 1;
+				link.maxWidth((int)width());
+				link.setPos( x + (width() - link.width())/2f, topY);
+				topY += link.height() + 2;
+
+				linkButton.x = link.left()-1;
+				linkButton.y = link.top()-1;
+				linkButton.width = link.width()+2;
+				linkButton.height = link.height()+2;
+
+				linkUnderline.size(link.width(), PixelScene.align(0.49f));
+				linkUnderline.x = link.left();
+				linkUnderline.y = link.bottom()+1;
+
 			}
-		}
-	}
 
-	public static void showChangeInfo(Image icon, String title, String... messages){
-		Scene s = ShatteredPixelDungeon.scene();
-		if (s instanceof ChangesScene){
-			((ChangesScene) s).updateChangesText(icon, title, messages);
-			return;
-		}
-		if (messages.length == 1) {
-			s.addToFront(new WndChanges(icon, title, messages[0]));
-		} else {
-			s.addToFront(new WndChangesTabbed(icon, title, messages));
+			topY -= 2;
+
+			height = Math.max(height, topY - top());
 		}
 	}
-	
-	@Override
-	protected void onBackPressed() {
-		ShatteredPixelDungeon.switchNoFade(TitleScene.class);
-	}
-
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
index 58d0e75c4..2e0116904 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
@@ -21,317 +21,418 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.scenes;
 
-import com.shatteredpixel.shatteredpixeldungeon.Chrome;
+import com.shatteredpixel.shatteredpixeldungeon.SeedFinder;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
-import com.shatteredpixel.shatteredpixeldungeon.services.news.News;
-import com.shatteredpixel.shatteredpixeldungeon.services.news.NewsArticle;
-import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Flare;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Archs;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ExitButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
-import com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock;
-import com.shatteredpixel.shatteredpixeldungeon.ui.StyledButton;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Window;
-import com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage;
-import com.watabou.noosa.BitmapText;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed;
+import com.watabou.input.PointerEvent;
 import com.watabou.noosa.Camera;
-import com.watabou.noosa.Game;
-import com.watabou.noosa.NinePatch;
+import com.watabou.noosa.ColorBlock;
+import com.watabou.noosa.Group;
+import com.watabou.noosa.Image;
+import com.watabou.noosa.PointerArea;
 import com.watabou.noosa.ui.Component;
 import com.watabou.utils.DeviceCompat;
 
-import java.util.ArrayList;
-import java.util.Calendar;
-
 public class NewsScene extends PixelScene {
 
-	boolean displayingNoArticles = false;
-
-	private static final int BTN_HEIGHT = 22;
-	private static final int BTN_WIDTH = 100;
-
 	@Override
 	public void create() {
 		super.create();
 
-		uiCamera.visible = false;
+		final float colWidth = 120;
+		final float fullWidth = colWidth * (landscape() ? 2 : 1);
 
 		int w = Camera.main.width;
 		int h = Camera.main.height;
 
-		int fullWidth = PixelScene.landscape() ? 202 : 100;
-		int left = (w - fullWidth)/2;
-
 		Archs archs = new Archs();
-		archs.setSize(w, h);
-		add(archs);
-
+		archs.setSize( w, h );
+		add( archs );
+
+		//darkens the arches
+		add(new ColorBlock(w, h, 0x88000000));
+
+		ScrollPane list = new ScrollPane( new Component() );
+		add( list );
+
+		Component content = list.content();
+		content.clear();
+
+		//*** Shattered Pixel Dungeon Credits ***
+
+		/*String shpxLink = "https://ShatteredPixel.com";
+		//tracking codes, so that the website knows where this pageview came from
+		shpxLink += "?utm_source=shatteredpd";
+		shpxLink += "&utm_medium=about_page";
+		shpxLink += "&utm_campaign=ingame_link";
+
+		CreditsBlock shpx = new CreditsBlock(true, Window.SHPX_COLOR,
+				"Shattered Pixel Dungeon",
+				Icons.SHPX.get(),
+				"Developed by: _Evan Debenham_\nBased on Pixel Dungeon's open source",
+				"ShatteredPixel.com",
+				shpxLink);
+		if (landscape()){
+			shpx.setRect((w - fullWidth)/2f - 6, 10, 120, 0);
+		} else {
+			shpx.setRect((w - fullWidth)/2f, 6, 120, 0);
+		}
+		content.add(shpx);
+
+		CreditsBlock alex = new CreditsBlock(false, Window.SHPX_COLOR,
+				"Hero Art & Design:",
+				Icons.ALEKS.get(),
+				"Aleksandar Komitov",
+				"alekskomitov.com",
+				"https://www.alekskomitov.com");
+		alex.setSize(colWidth/2f, 0);
+		if (landscape()){
+			alex.setPos(shpx.right(), shpx.top() + (shpx.height() - alex.height()*2)/2f);
+		} else {
+			alex.setPos(w/2f - colWidth/2f, shpx.bottom()+5);
+		}
+		content.add(alex);
+
+		CreditsBlock charlie = new CreditsBlock(false, Window.SHPX_COLOR,
+				"Sound Effects:",
+				Icons.CELESTI.get(),
+				"Celesti",
+				"s9menine.itch.io",
+				"https://s9menine.itch.io");
+		charlie.setRect(alex.right(), alex.top(), colWidth/2f, 0);
+		content.add(charlie);
+
+		CreditsBlock kristjan = new CreditsBlock(false, Window.SHPX_COLOR,
+				"Music:",
+				Icons.KRISTJAN.get(),
+				"Kristjan Haaristo",
+				"youtube.com/user/...",
+				"https://www.youtube.com/channel/UCL1e7SgzSWbD_DQxB_5YcLA");
+		kristjan.setRect(alex.right() - colWidth/4f, alex.bottom() + 5, colWidth/2f, 0);
+		content.add(kristjan);
+
+		//*** Pixel Dungeon Credits ***
+
+		final int WATA_COLOR = 0x55AAFF;
+		CreditsBlock wata = new CreditsBlock(true, WATA_COLOR,
+				"Pixel Dungeon",
+				Icons.WATA.get(),
+				"Developed by: _Watabou_\nInspired by Brian Walker's Brogue",
+				"pixeldungeon.watabou.ru",
+				"http://pixeldungeon.watabou.ru");
+		if (landscape()){
+			wata.setRect(shpx.left(), kristjan.bottom() + 8, colWidth, 0);
+		} else {
+			wata.setRect(shpx.left(), kristjan.bottom() + 8, colWidth, 0);
+		}
+		content.add(wata);
+
+		addLine(wata.top() - 4, content);
+
+		CreditsBlock cube = new CreditsBlock(false, WATA_COLOR,
+				"Music:",
+				Icons.CUBE_CODE.get(),
+				"Cube Code",
+				null,
+				null);
+		cube.setSize(colWidth/2f, 0);
+		if (landscape()){
+			cube.setPos(wata.right() + colWidth/4f, wata.top() + (wata.height() - cube.height())/2f);
+		} else {
+			cube.setPos(alex.left() + colWidth/4f, wata.bottom()+5);
+		}
+		content.add(cube);
+
+		//*** libGDX Credits ***
+
+		final int GDX_COLOR = 0xE44D3C;
+		CreditsBlock gdx = new CreditsBlock(true,
+				GDX_COLOR,
+				"libGDX",
+				Icons.LIBGDX.get(),
+				"ShatteredPD is powered by _libGDX_!",
+				"libgdx.com",
+				"https://libgdx.com/");
+		if (landscape()){
+			gdx.setRect(wata.left(), wata.bottom() + 8, colWidth, 0);
+		} else {
+			gdx.setRect(wata.left(), cube.bottom() + 8, colWidth, 0);
+		}
+		content.add(gdx);
+
+		addLine(gdx.top() - 4, content);
+
+		CreditsBlock arcnor = new CreditsBlock(false, GDX_COLOR,
+				"Pixel Dungeon GDX:",
+				Icons.ARCNOR.get(),
+				"Edu García",
+				"twitter.com/arcnor",
+				"https://twitter.com/arcnor");
+		arcnor.setSize(colWidth/2f, 0);
+		if (landscape()){
+			arcnor.setPos(gdx.right(), gdx.top() + (gdx.height() - arcnor.height())/2f);
+		} else {
+			arcnor.setPos(alex.left(), gdx.bottom()+5);
+		}
+		content.add(arcnor);
+
+		CreditsBlock purigro = new CreditsBlock(false, GDX_COLOR,
+				"Shattered GDX Help:",
+				Icons.PURIGRO.get(),
+				"Kevin MacMartin",
+				"github.com/prurigro",
+				"https://github.com/prurigro/");
+		purigro.setRect(arcnor.right()+2, arcnor.top(), colWidth/2f, 0);
+		content.add(purigro);
+
+		//*** Transifex Credits ***
+
+		CreditsBlock transifex = new CreditsBlock(true,
+				Window.TITLE_COLOR,
+				null,
+				null,
+				"ShatteredPD is community-translated via _Transifex_! Thank you so much to all of Shattered's volunteer translators!",
+				"transifex.com/shattered-pixel/...",
+				"https://explore.transifex.com/shattered-pixel/shattered-pixel-dungeon/");
+		transifex.setRect((Camera.main.width - colWidth)/2f, purigro.bottom() + 12, colWidth, 0);
+		content.add(transifex);
+
+		addLine(transifex.top() - 4, content);
+
+		addLine(transifex.bottom() + 4, content);
+
+		//*** Freesound Credits ***
+
+		CreditsBlock freesound = new CreditsBlock(true,
+				Window.TITLE_COLOR,
+				null,
+				null,
+				"Shattered Pixel Dungeon uses the following sound samples from _freesound.org_:\n\n" +
+
+				"Creative Commons Attribution License:\n" +
+				"_SFX ATTACK SWORD 001.wav_ by _JoelAudio_\n" +
+				"_Pack: Slingshots and Longbows_ by _saturdaysoundguy_\n" +
+				"_Cracking/Crunching, A.wav_ by _InspectorJ_\n" +
+				"_Extracting a sword.mp3_ by _Taira Komori_\n" +
+				"_Pack: Uni Sound Library_ by _timmy h123_\n\n" +
+
+				"Creative Commons Zero License:\n" +
+				"_Pack: Movie Foley: Swords_ by _Black Snow_\n" +
+				"_machine gun shot 2.flac_ by _qubodup_\n" +
+				"_m240h machine gun burst 4.flac_ by _qubodup_\n" +
+				"_Pack: Onomatopoeia_ by _Adam N_\n" +
+				"_Pack: Watermelon_ by _lolamadeus_\n" +
+				"_metal chain_ by _Mediapaja2009_\n" +
+				"_Pack: Sword Clashes Pack_ by _JohnBuhr_\n" +
+				"_Pack: Metal Clangs and Pings_ by _wilhellboy_\n" +
+				"_Pack: Stabbing Stomachs & Crushing Skulls_ by _TheFilmLook_\n" +
+				"_Sheep bleating_ by _zachrau_\n" +
+				"_Lemon,Juicy,Squeeze,Fruit.wav_ by _Filipe Chagas_\n" +
+				"_Lemon,Squeeze,Squishy,Fruit.wav_ by _Filipe Chagas_",
+				"www.freesound.org",
+				"https://www.freesound.org");
+		freesound.setRect(transifex.left()-10, transifex.bottom() + 8, colWidth+20, 0);
+		content.add(freesound);
+*/
+
+		list.setRect( 0, 0, w, h );
+		list.scrollTo(0, 0);
+
+		String existingSeedtext = SPDSettings.customSeed();
+		ShatteredPixelDungeon.scene().addToFront( new WndTextInput(Messages.get(HeroSelectScene.class, "custom_seed_title"),
+			"동일한 게임 버전의 동일한 시드는 언제나 같은 던전을 생성합니다! _분석할 시드를 입력해주세요_",
+			existingSeedtext,
+			20,
+			false,
+			Messages.get(HeroSelectScene.class, "custom_seed_set"),
+			Messages.get(HeroSelectScene.class, "custom_seed_clear")){
+				@Override
+					public void onSelect(boolean positive, String text) {
+						text = DungeonSeed.formatText(text);
+						long seed = DungeonSeed.convertFromText(text);
+						if (positive && seed != -1){
+							CreditsBlock txt = new CreditsBlock(true,
+								Window.TITLE_COLOR,
+								null,
+								null,
+								new SeedFinder().logSeedItems(text,30),
+								null,
+								null);
+							txt.setRect((Camera.main.width - colWidth)/2f, /*freesound.bottom() +*/ 12, colWidth, 0);
+							content.add(txt);
+							content.setSize( fullWidth, txt.bottom()+10 );
+						} else {
+							SPDSettings.customSeed("");
+							ShatteredPixelDungeon.switchNoFade( TitleScene.class );
+						}
+					}
+			});
+			
 		ExitButton btnExit = new ExitButton();
-		btnExit.setPos(w - btnExit.width(), 0);
-		add(btnExit);
+		btnExit.setPos( Camera.main.width - btnExit.width(), 0 );
+		add( btnExit );
 
-		RenderedTextBlock title = PixelScene.renderTextBlock(Messages.get(this, "title"), 9);
-		title.hardlight(Window.TITLE_COLOR);
-		title.setPos(
-				(w - title.width()) / 2f,
-				(20 - title.height()) / 2f
-		);
-		align(title);
-		add(title);
+		//fadeIn();
+	}
+	
+	@Override
+	protected void onBackPressed() {
+		ShatteredPixelDungeon.switchScene(TitleScene.class);
+	}
 
-		float top = 18;
+	private void addLine( float y, Group content ){
+		ColorBlock line = new ColorBlock(Camera.main.width, 1, 0xFF333333);
+		line.y = y;
+		content.add(line);
+	}
 
-		displayingNoArticles = !News.articlesAvailable();
-		if (displayingNoArticles || Messages.lang() != Languages.ENGLISH) {
+	public static class CreditsBlock extends Component {
 
-			Component newsInfo = new NewsInfo();
-			newsInfo.setRect(left, 20, fullWidth, 0);
-			add(newsInfo);
+		boolean large;
+		RenderedTextBlock title;
+		Image avatar;
+		Flare flare;
+		RenderedTextBlock body;
 
-			top = newsInfo.bottom();
+		RenderedTextBlock link;
+		ColorBlock linkUnderline;
+		PointerArea linkButton;
 
-		}
+		//many elements can be null, but body is assumed to have content.
+		public CreditsBlock(boolean large, int highlight, String title, Image avatar, String body, String linkText, String linkUrl){
+			super();
 
-		if (!displayingNoArticles) {
-			ArrayList<NewsArticle> articles = News.articles();
+			this.large = large;
 
-			float articleSpace = h - top - 2;
-			int rows = articles.size();
-			if (PixelScene.landscape()){
-				rows /= 2;
+			if (title != null) {
+				this.title = PixelScene.renderTextBlock(title, large ? 8 : 6);
+				if (highlight != -1) this.title.hardlight(highlight);
+				add(this.title);
 			}
-			rows++;
 
-			while ((articleSpace) / (BTN_HEIGHT+0.5f) < rows) {
-				articles.remove(articles.size() - 1);
-				if (PixelScene.landscape()) {
-					articles.remove(articles.size() - 1);
-				}
-				rows--;
+			if (avatar != null){
+				this.avatar = avatar;
+				add(this.avatar);
 			}
 
-			float gap = ((articleSpace) - (BTN_HEIGHT * rows)) / (float)rows;
-
-			boolean rightCol = false;
-			for (NewsArticle article : articles) {
-				StyledButton b = new ArticleButton(article);
-				b.multiline = true;
-				if (!rightCol) {
-					top += gap;
-					b.setRect( left, top, BTN_WIDTH, BTN_HEIGHT);
-				} else {
-					b.setRect( left + fullWidth - BTN_WIDTH, top, BTN_WIDTH, BTN_HEIGHT);
-				}
-				align(b);
-				add(b);
-				if (!PixelScene.landscape()) {
-					top += BTN_HEIGHT;
-				} else {
-					if (rightCol){
-						top += BTN_HEIGHT;
-					}
-					rightCol = !rightCol;
-				}
-			}
-			top += gap;
-		} else {
-			top += 20;
-		}
-
-		StyledButton btnSite = new StyledButton(Chrome.Type.GREY_BUTTON_TR, Messages.get(this, "read_more")){
-			@Override
-			protected void onClick() {
-				super.onClick();
-				String link = "https://ShatteredPixel.com";
-				//tracking codes, so that the website knows where this pageview came from
-				link += "?utm_source=shatteredpd";
-				link += "&utm_medium=news_page";
-				link += "&utm_campaign=ingame_link";
-				ShatteredPixelDungeon.platform.openURI(link);
+			if (large && highlight != -1 && this.avatar != null){
+				this.flare = new Flare( 7, 24 ).color( highlight, true ).show(this.avatar, 0);
+				this.flare.angularSpeed = 20;
 			}
-		};
-		btnSite.icon(Icons.get(Icons.NEWS));
-		btnSite.textColor(Window.TITLE_COLOR);
-		btnSite.setRect(left, top, fullWidth, BTN_HEIGHT);
-		add(btnSite);
-
-	}
 
-	@Override
-	protected void onBackPressed() {
-		ShatteredPixelDungeon.switchNoFade( TitleScene.class );
-	}
+			this.body = PixelScene.renderTextBlock(body, 6);
+			if (highlight != -1) this.body.setHightlighting(true, highlight);
+			if (large) this.body.align(RenderedTextBlock.CENTER_ALIGN);
+			add(this.body);
 
-	@Override
-	public void update() {
-		if (displayingNoArticles && News.articlesAvailable()){
-			ShatteredPixelDungeon.seamlessResetScene();
-		}
-		super.update();
-	}
+			if (linkText != null && linkUrl != null){
 
-	private static class NewsInfo extends Component {
+				int color = 0xFFFFFFFF;
+				if (highlight != -1) color = 0xFF000000 | highlight;
+				this.linkUnderline = new ColorBlock(1, 1, color);
+				add(this.linkUnderline);
 
-		NinePatch bg;
-		RenderedTextBlock text;
-		RedButton button;
+				this.link = PixelScene.renderTextBlock(linkText, 6);
+				if (highlight != -1) this.link.hardlight(highlight);
+				add(this.link);
 
-		@Override
-		protected void createChildren() {
-			bg = Chrome.get(Chrome.Type.GREY_BUTTON_TR);
-			add(bg);
-			
-			String message = "";
-
-			if (Messages.lang() != Languages.ENGLISH){
-				message += Messages.get(this, "english_warn");
-			}
-			
-			if (!News.articlesAvailable()){
-				if (SPDSettings.news()) {
-					if (SPDSettings.WiFi() && !Game.platform.connectedToUnmeteredNetwork()) {
-						message += "\n\n" + Messages.get(this, "metered_network");
-
-						button = new RedButton(Messages.get(this, "enable_data")) {
-							@Override
-							protected void onClick() {
-								super.onClick();
-								SPDSettings.WiFi(false);
-								News.checkForNews();
-								ShatteredPixelDungeon.seamlessResetScene();
-							}
-						};
-						add(button);
-					} else {
-						message += "\n\n" + Messages.get(this, "no_internet");
+				linkButton = new PointerArea(0, 0, 0, 0){
+					@Override
+					protected void onClick( PointerEvent event ) {
+						ShatteredPixelDungeon.platform.openURI( linkUrl );
 					}
-				} else {
-					message += "\n\n" + Messages.get(this, "news_disabled");
-
-					button = new RedButton(Messages.get(this, "enable_news")) {
-						@Override
-						protected void onClick() {
-							super.onClick();
-							SPDSettings.news(true);
-							News.checkForNews();
-							ShatteredPixelDungeon.seamlessResetScene();
-						}
-					};
-					add(button);
-				}
+				};
+				add(linkButton);
 			}
 
-			if (message.startsWith("\n\n")) message = message.replaceFirst("\n\n", "");
-			
-			text = PixelScene.renderTextBlock(message, 6);
-			text.hardlight(CharSprite.WARNING);
-			add(text);
 		}
 
 		@Override
 		protected void layout() {
-			bg.x = x;
-			bg.y = y;
-
-			text.maxWidth((int)width - bg.marginHor());
-			text.setPos(x + bg.marginLeft(), y + bg.marginTop()+1);
+			super.layout();
 
-			height = (text.bottom()) - y;
+			float topY = top();
 
-			if (button != null){
-				height += 4;
-				button.multiline = true;
-				button.setSize(width - bg.marginHor(), 16);
-				button.setSize(width - bg.marginHor(), Math.max(button.reqHeight(), 16));
-				button.setPos(x + (width - button.width())/2, y + height);
-				height = button.bottom() - y;
+			if (title != null){
+				title.maxWidth((int)width());
+				title.setPos( x + (width() - title.width())/2f, topY);
+				topY += title.height() + (large ? 2 : 1);
 			}
 
-			height += bg.marginBottom() + 1;
+			if (large){
 
-			bg.size(width, height);
+				if (avatar != null){
+					avatar.x = x + (width()-avatar.width())/2f;
+					avatar.y = topY;
+					PixelScene.align(avatar);
+					if (flare != null){
+						flare.point(avatar.center());
+					}
+					topY = avatar.y + avatar.height() + 2;
+				}
 
-		}
-	}
+				body.maxWidth((int)width());
+				body.setPos( x + (width() - body.width())/2f, topY);
+				topY += body.height() + 2;
 
-	private static class ArticleButton extends StyledButton {
+			} else {
 
-		NewsArticle article;
+				if (avatar != null){
+					avatar.x = x;
+					body.maxWidth((int)(width() - avatar.width - 1));
 
-		BitmapText date;
+					float fullAvHeight = Math.max(avatar.height(), 16);
+					if (fullAvHeight > body.height()){
+						avatar.y = topY + (fullAvHeight - avatar.height())/2f;
+						PixelScene.align(avatar);
+						body.setPos( avatar.x + avatar.width() + 1, topY + (fullAvHeight - body.height())/2f);
+						topY += fullAvHeight + 1;
+					} else {
+						avatar.y = topY + (body.height() - fullAvHeight)/2f;
+						PixelScene.align(avatar);
+						body.setPos( avatar.x + avatar.width() + 1, topY);
+						topY += body.height() + 2;
+					}
 
-		public ArticleButton(NewsArticle article) {
-			super(Chrome.Type.GREY_BUTTON_TR, article.title, 6);
-			this.article = article;
+				} else {
+					topY += 1;
+					body.maxWidth((int)width());
+					body.setPos( x, topY);
+					topY += body.height()+2;
+				}
 
-			icon(News.parseArticleIcon(article));
-			long lastRead = SPDSettings.newsLastRead();
-			if (lastRead > 0 && article.date.getTime() > lastRead) {
-				textColor(Window.SHPX_COLOR);
 			}
 
-			Calendar cal = Calendar.getInstance();
-			cal.setTime(article.date);
-			date = new BitmapText( News.parseArticleDate(article), pixelFont);
-			date.scale.set(PixelScene.align(0.5f));
-			date.hardlight( 0x888888 );
-			date.measure();
-			add(date);
-		}
+			if (link != null){
+				if (large) topY += 1;
+				link.maxWidth((int)width());
+				link.setPos( x + (width() - link.width())/2f, topY);
+				topY += link.height() + 2;
 
-		@Override
-		protected void layout() {
-			super.layout();
+				linkButton.x = link.left()-1;
+				linkButton.y = link.top()-1;
+				linkButton.width = link.width()+2;
+				linkButton.height = link.height()+2;
 
-			icon.x = x + bg.marginLeft() + (16-icon.width())/2f;
-			PixelScene.align(icon);
-			text.setPos(x + bg.marginLeft() + 18, text.top());
+				linkUnderline.size(link.width(), PixelScene.align(0.49f));
+				linkUnderline.x = link.left();
+				linkUnderline.y = link.bottom()+1;
 
-			if (date != null) {
-				date.x = x + width - bg.marginRight() - date.width() + 1;
-				date.y = y + height - bg.marginBottom() - date.height() + 2.5f;
-				align(date);
 			}
-		}
 
-		@Override
-		protected void onClick() {
-			super.onClick();
-			textColor(Window.WHITE);
-			if (article.date.getTime() > SPDSettings.newsLastRead()){
-				SPDSettings.newsLastRead(article.date.getTime());
-			}
-			ShatteredPixelDungeon.scene().addToFront(new WndArticle(article));
-		}
-	}
-
-	private static class WndArticle extends WndTitledMessage {
-
-		public WndArticle(NewsArticle article ) {
-			super(News.parseArticleIcon(article), article.title, article.summary);
+			topY -= 2;
 
-			RedButton link = new RedButton(Messages.get(NewsScene.class, "read_more")){
-				@Override
-				protected void onClick() {
-					super.onClick();
-					String link = article.URL;
-					//tracking codes, so that the website knows where this pageview came from
-					link += "?utm_source=shatteredpd";
-					link += "&utm_medium=news_page";
-					link += "&utm_campaign=ingame_link";
-					ShatteredPixelDungeon.platform.openURI(link);
-				}
-			};
-			link.setRect(0, height + 2, width, BTN_HEIGHT);
-			add(link);
-			resize(width, (int) link.bottom());
+			height = Math.max(height, topY - top());
 		}
-
-
 	}
-
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
index 16c9134c1..a7a333a36 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
@@ -157,11 +157,11 @@ public class TitleScene extends PixelScene {
 		btnBadges.icon(Icons.get(Icons.BADGES));
 		add(btnBadges);
 
-		StyledButton btnNews = new NewsButton(GREY_TR, Messages.get(this, "news"));
+		StyledButton btnNews = new NewsButton(GREY_TR, Messages.get(this, "seedanalyze"));  // 새소식 -> 시드분석 버튼
 		btnNews.icon(Icons.get(Icons.NEWS));
 		add(btnNews);
 
-		StyledButton btnChanges = new ChangesButton(GREY_TR, Messages.get(this, "changes"));
+		StyledButton btnChanges = new SeedFindButton(GREY_TR, Messages.get(this, "seedfind"));  // 변경 -> 시드찾기 버튼
 		btnChanges.icon(Icons.get(Icons.CHANGES));
 		add(btnChanges);
 
@@ -235,7 +235,7 @@ public class TitleScene extends PixelScene {
 
 		int unreadCount = -1;
 
-		@Override
+		/*@Override
 		public void update() {
 			super.update();
 
@@ -257,7 +257,7 @@ public class TitleScene extends PixelScene {
 			if (unreadCount > 0){
 				textColor(ColorMath.interpolate( 0xFFFFFF, Window.SHPX_COLOR, 0.5f + (float)Math.sin(Game.timeTotal*5)/2f));
 			}
-		}
+		}*/
 
 		@Override
 		protected void onClick() {
@@ -266,6 +266,17 @@ public class TitleScene extends PixelScene {
 		}
 	}
 
+	private static class SeedFindButton extends StyledButton {
+		public SeedFindButton(Chrome.Type type, String label ){
+			super(type, label);
+		}
+		@Override
+		protected void onClick() {
+			super.onClick();
+			ShatteredPixelDungeon.switchNoFade( ChangesScene.class );
+		}
+	}
+
 	private static class ChangesButton extends StyledButton {
 
 		public ChangesButton( Chrome.Type type, String label ){
